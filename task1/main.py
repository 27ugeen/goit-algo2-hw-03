from graph_data import create_graph
from graph_visualization import draw_graph
from max_flow import compute_max_flow
import pandas as pd

G = create_graph()

draw_graph(G, "–ú–æ–¥–µ–ª—å –ª–æ–≥—ñ—Å—Ç–∏—á–Ω–æ—ó –º–µ—Ä–µ–∂—ñ (–ø–æ—á–∞—Ç–∫–æ–≤–∞)")

flow_value, flow_dict = compute_max_flow(G)

print(f"\nüîπ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –ø–æ—Ç—ñ–∫ —É –ª–æ–≥—ñ—Å—Ç–∏—á–Ω—ñ–π –º–µ—Ä–µ–∂—ñ: {flow_value}")

draw_graph(G, "–ú–æ–¥–µ–ª—å –ª–æ–≥—ñ—Å—Ç–∏—á–Ω–æ—ó –º–µ—Ä–µ–∂—ñ (—Ñ–∞–∫—Ç–∏—á–Ω—ñ –ø–æ—Ç–æ–∫–∏)", flow_dict)


terminals = ["–¢–µ—Ä–º—ñ–Ω–∞–ª 1", "–¢–µ—Ä–º—ñ–Ω–∞–ª 2"]
terminal_flows = {t: sum(flow_dict[t].values()) for t in terminals}

print("\nüìå –ü–æ—Ç—ñ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ —á–µ—Ä–µ–∑ —Ç–µ—Ä–º—ñ–Ω–∞–ª–∏:")
for term, flow in terminal_flows.items():
    print(f"üîπ {term}: {flow} –æ–¥–∏–Ω–∏—Ü—å")

store_flows = {}
for store in [f"–ú–∞–≥–∞–∑–∏–Ω {i}" for i in range(1, 15)]:
    if store in flow_dict:
        store_flows[store] = sum(flow_dict[store].values())  # –°—É–º–∞ –≤—Å—ñ—Ö –≤—Ö—ñ–¥–Ω–∏—Ö –ø–æ—Ç–æ–∫—ñ–≤
    else:
        store_flows[store] = 0  # –Ø–∫—â–æ –º–∞–≥–∞–∑–∏–Ω—É –Ω–µ–º–∞—î —É flow_dict, –ø–æ—Ç—ñ–∫ = 0

bottlenecks = [(u, v, d["capacity"]) for u, v, d in G.edges(data=True) if flow_dict[u][v] == d["capacity"]]

print("\nüìå –ú–∞—Ä—à—Ä—É—Ç–∏, —â–æ –ø—Ä–∞—Ü—é—é—Ç—å –Ω–∞ –º–µ–∂—ñ –ø—Ä–æ–ø—É—Å–∫–Ω–æ—ó –∑–¥–∞—Ç–Ω–æ—Å—Ç—ñ (–≤—É–∑—å–∫—ñ –º—ñ—Å—Ü—è):")
for u, v, cap in bottlenecks:
    print(f"üîπ {u} ‚Üí {v} (–ú–∞–∫—Å: {cap})")

df_stores = pd.DataFrame(store_flows.items(), columns=["–ú–∞–≥–∞–∑–∏–Ω", "–§–∞–∫—Ç–∏—á–Ω–∏–π –ø–æ—Ç—ñ–∫"])
df_stores = df_stores.sort_values(by="–§–∞–∫—Ç–∏—á–Ω–∏–π –ø–æ—Ç—ñ–∫", ascending=True)

print("\nüìå –ú–∞–≥–∞–∑–∏–Ω–∏ –∑ –æ—Ç—Ä–∏–º–∞–Ω–∏–º —Ç–æ–≤–∞—Ä–æ–º:")
print(df_stores)

low_supply_stores = df_stores[df_stores["–§–∞–∫—Ç–∏—á–Ω–∏–π –ø–æ—Ç—ñ–∫"] < 10]

if not low_supply_stores.empty:
    print("\nüìå ‚ùó –ú–∞–≥–∞–∑–∏–Ω–∏ –∑ –º–∞–ª–∏–º –ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è–º:")
    print(low_supply_stores)


print("\nüìå –í—É–∑—å–∫—ñ –º—ñ—Å—Ü—è —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —â–æ–¥–æ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è:")
for u, v, cap in bottlenecks:
    print(f"üîπ –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –∑–±—ñ–ª—å—à–∏—Ç–∏ –ø—Ä–æ–ø—É—Å–∫–Ω—É –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å —Ä–µ–±—Ä–∞ {u} ‚Üí {v} (–ú–∞–∫—Å: {cap})")

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —â–æ–¥–æ –º–∞–≥–∞–∑–∏–Ω—ñ–≤ –∑ –º–∞–ª–∏–º –ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è–º
if not low_supply_stores.empty:
    print("\nüìå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —â–æ–¥–æ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è –º–∞–≥–∞–∑–∏–Ω—ñ–≤:")
    for _, row in low_supply_stores.iterrows():
        print(f"üî∏ –ú–∞–≥–∞–∑–∏–Ω {row['–ú–∞–≥–∞–∑–∏–Ω']} –æ—Ç—Ä–∏–º–∞–≤ –ª–∏—à–µ {row['–§–∞–∫—Ç–∏—á–Ω–∏–π –ø–æ—Ç—ñ–∫']} –æ–¥–∏–Ω–∏—Ü—å —Ç–æ–≤–∞—Ä—É. "
              f"–†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –∑–±—ñ–ª—å—à–∏—Ç–∏ –ø–æ—Ç—ñ–∫ —á–µ—Ä–µ–∑ —Å–∫–ª–∞–¥–∏ –∞–±–æ –∑–Ω–∞–π—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏.")